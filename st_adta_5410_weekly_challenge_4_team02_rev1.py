# -*- coding: utf-8 -*-
"""Copy of ADTA_5410_Weekly_Challenge_4_Team02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19QAsCW0W5D9U_PX5OcVuB4kUIziK88f4
"""

import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np

# Load dataset

retaildata_revised_df = pd.read_csv('BSS Retail Data_Revised.csv')

retaildata_revised_df.columns = retaildata_revised_df.columns.str.strip().str.lower()

numeric_columns = [
        'price', 'unitsordered', 'sales', 'profit', 'adspend',
        'comp_1_price', 'comp_data_min_price', 'comp_data_max_price'
    ]

# App Title and Description
st.title("BSS Retail Data Interactive Dashboard")
st.write("Explore patterns in the data.")

# Sidebar Filters

#Convert Sales Date
retaildata_revised_df['salesdate'] = pd.to_datetime(retaildata_revised_df['salesdate'], errors='coerce')

st.sidebar.header("Filter Options")
price_range = st.sidebar.slider("Price", float(retaildata_revised_df['price'].min()), float(retaildata_revised_df['price'].max()),
                                (float(retaildata_revised_df['price'].min()), float(retaildata_revised_df['price'].max())))

units_range = st.sidebar.slider("Units Ordered", int(retaildata_revised_df['unitsordered'].min()), int(retaildata_revised_df['unitsordered'].max()),
                                 (int(retaildata_revised_df['unitsordered'].min()), int(retaildata_revised_df['unitsordered'].max())))

min_date = retaildata_revised_df['salesdate'].min()
max_date = retaildata_revised_df['salesdate'].max()

date_range = st.sidebar.date_input("Select Sales Date Range", (min_date, max_date), min_value=min_date, max_value=max_date)

selected_numeric_col = st.sidebar.selectbox("Select Numeric Column for Histogram", options=numeric_columns)

scatter_x_col = st.sidebar.selectbox("Scatterplot: Compare Units Ordered vs...", options=[col for col in numeric_columns if col != 'unitsordered'])

# Filter data based on sidebar
filtered_data = retaildata_revised_df[
    (retaildata_revised_df['price'].between(*price_range)) &
    (retaildata_revised_df['unitsordered'].between(*units_range))
]

# Show filtered data if selected
if st.sidebar.checkbox("Show Filtered Data"):
    st.write(filtered_data)

# Define numeric columns
numeric_columns = [
    'price', 'unitsordered', 'sales', 'profit', 'adspend',
    'comp_1_price', 'comp_data_min_price', 'comp_data_max_price'
]

# Numeric Columns Histogram
st.header(f"Distribution of {selected_numeric_col}")
st.write(f"This histogram shows the distribution of {selected_numeric_col} in the filtered data.")

fig, ax = plt.subplots()
sns.histplot(filtered_data[selected_numeric_col].dropna(), bins=30, color='skyblue', kde=True, ax=ax)
ax.set_title(f"Histogram of {selected_numeric_col}")
ax.set_xlabel(selected_numeric_col)
ax.set_ylabel("Frequency")
st.pyplot(fig)

# Scatter Plot Profit vs
st.header(f"Scatter Plot: Units Ordered vs {scatter_x_col}")
st.write(f"This scatter plot shows the relationship between Units Ordered and {scatter_x_col}.")

show_scatter_trendline = st.checkbox("Show Trendline on Scatterplot", value=False)

fig = px.scatter(filtered_data, x=scatter_x_col, y='unitsordered',
                 title=f"Units Ordered vs {scatter_x_col}",
                 labels={scatter_x_col: scatter_x_col, "unitsordered": "Units Ordered"},
                 trendline="ols" if show_scatter_trendline else None)
st.plotly_chart(fig)

# Correlation Matrix
st.header("Correlation Matrix")
if st.checkbox("Show Correlation Matrix"):
    numeric_columns = [
        'price', 'unitsordered', 'sales', 'profit', 'adspend',
        'comp_1_price', 'comp_data_min_price', 'comp_data_max_price'
    ]
    corr_matrix = filtered_data[numeric_columns].corr()
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig)
    
