# -*- coding: utf-8 -*-
"""Copy of ADTA_5410_Weekly_Challenge_4_Team02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19QAsCW0W5D9U_PX5OcVuB4kUIziK88f4
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np


# Load dataset

retaildata_revised_df = pd.read_csv('BSS Retail Data_Revised.csv')

retaildata_revised_df.columns = retaildata_revised_df.columns.str.strip().str.lower()

# App Title and Description
st.title("BSS Retail Data Interactive Dashboard")
st.write("Explore patterns in BSS retail sales data.")

# Sidebar Filters
st.sidebar.header("Filter Options")
price_range = st.sidebar.slider("Price", float(retaildata_revised_df['price'].min()), float(retaildata_revised_df['price'].max()),
                                (float(retaildata_revised_df['price'].min()), float(retaildata_revised_df['price'].max())))

units_range = st.sidebar.slider("Units Ordered", int(retaildata_revised_df['unitsordered'].min()), int(retaildata_revised_df['unitsordered'].max()),
                                 (int(retaildata_revised_df['unitsordered'].min()), int(retaildata_revised_df['unitsordered'].max())))

# Filter data based on sidebar
filtered_data = retaildata_revised_df[
    (retaildata_revised_df['price'].between(*price_range)) &
    (retaildata_revised_df['unitsordered'].between(*units_range))
]

# Show filtered data if selected
if st.sidebar.checkbox("Show Filtered Data"):
    st.write(filtered_data)

# Define numeric columns
numeric_columns = [
    'price', 'unitsordered', 'sales', 'profit', 'adspend',
    'comp_1_price', 'comp_data_min_price', 'comp_data_max_price'
]

# Loop for each numeric column
for col in numeric_columns:
    if col in filtered_data.columns:
        st.subheader(f"Distribution of {col.title()}")
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.histplot(filtered_data[col].dropna(), bins=30, color='skyblue', kde=True, ax=ax)
        ax.set_title(f"Histogram of {col.title()}")
        ax.set_xlabel(col.title())
        ax.set_ylabel("Frequency")
        ax.grid(True, linestyle='--', alpha=0.6)
        ax.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: "{:,}".format(int(x))))
        st.pyplot(fig)

# Scatter Plot: Price vs Profit
st.header("Scatter Plot: Price vs. Profit")
st.write("Scatter plot of price versus profit. Optionally add a trendline.")
show_trendline = st.checkbox("Show Trendline", value=False)
fig = px.scatter(filtered_data, x='price', y='profit',
                 title="Price vs. Profit",
                 labels={"price": "Price", "profit": "Profit"},
                 trendline="ols" if show_trendline else None)
st.plotly_chart(fig)

# Correlation Matrix
st.header("Correlation Matrix")
if st.checkbox("Show Correlation Matrix"):
    numeric_columns = [
        'price', 'unitsordered', 'sales', 'profit', 'adspend',
        'comp_1_price', 'comp_data_min_price', 'comp_data_max_price'
    ]
    corr_matrix = filtered_data[numeric_columns].corr()
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
    st.pyplot(fig)